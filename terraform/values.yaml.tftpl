deployTarget: AMAZON

global:
  postgresql:
    postgresqlUsername: ${POSTGRESQL_USERNAME}
    postgresqlExistingSecretName: ${PROJECT_SECRETS}
    postgresqlExistingSecretKey: postgresql_password
    postgresqlDatabase: ${POSTGRESQL_DATABASE}
    postgresqlHost: ${POSTGRESQL_HOST}

loki-stack:
  loki:
    persistence:
      enabled: true
      size: ${LOKI_STORAGE_SIZE}
      storageClassName: ${LOKI_STORAGE_CLASS}

console:
  image:
    tag: ${CONSOLE_IMAGE_TAG}
  config:
    oauthClientSecretSecretName: ${PROJECT_SECRETS}

pachd:
  image:
    tag: ${PACHD_IMAGE_TAG}
  logLevel: ${LOG_LEVEL}
  lokiDeploy: ${LOKI_DEPLOY}
  lokiLogging: ${LOKI_LOGGING}
  enterpriseLicenseKeySecretName: ${PROJECT_SECRETS}
  rootTokenSecretName: ${PROJECT_SECRETS}
  clusterDeploymentID: ${CLUSTER_DEPLOYMENT_ID}
  enterpriseSecretSecretName: ${PROJECT_SECRETS}
  oauthClientSecretSecretName: ${PROJECT_SECRETS}
  localhostIssuer: "true"
  serviceAccount:
    additionalAnnotations:
      eks.amazonaws.com/role-arn: ${BUCKET_ROLE_ARN}
  worker:
    serviceAccount:
      additionalAnnotations:
        eks.amazonaws.com/role-arn: ${BUCKET_ROLE_ARN}
  storage:
    amazon:
      bucket: ${BUCKET_NAME}
      region: ${AWS_REGION}
  resources:
    requests:
      cpu: ${PACHD_CPU_REQUEST}
      memory: ${PACHD_MEMORY_REQUEST}

etcd:
  storageClass: ${ETCD_STORAGE_CLASS}
  storageSize: ${ETCD_STORAGE_SIZE}
  resources:
    requests:
      cpu: ${ETCD_CPU_REQUEST}
      memory: ${ETCD_MEMORY_REQUEST}

pgbouncer:
  maxConnections: ${PGBOUNCER_MAX_CONNECTIONS}
  defaultPoolSize: ${PGBOUNCER_DEFAULT_POOL_SIZE}

postgresql:
  enabled: false

proxy:
  enabled: true
  host: ${DNS_NAME}
  service:
    type: LoadBalancer

oidc:
  upstreamIDPsSecretName: ${PROJECT_SECRETS}
  userAccessibleOauthIssuerHost: ${DNS_NAME}
